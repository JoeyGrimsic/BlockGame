plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
    // LWJGL dependencies
    implementation 'org.lwjgl:lwjgl:3.3.1'
    implementation 'org.lwjgl:lwjgl-glfw:3.3.1'
    implementation 'org.lwjgl:lwjgl-opengl:3.3.1'

    // Native bindings based on the OS
    def osName = System.getProperty("os.name").toLowerCase()
    def osArch = System.getProperty("os.arch").toLowerCase()
    if (osName.contains("mac")) {
        if (osArch.contains("aarch64") || osArch.contains("arm64")) {
            // macOS with ARM64 (Apple Silicon)
            runtimeOnly 'org.lwjgl:lwjgl:3.3.1:natives-macos-arm64'
            runtimeOnly 'org.lwjgl:lwjgl-glfw:3.3.1:natives-macos-arm64'
            runtimeOnly 'org.lwjgl:lwjgl-opengl:3.3.1:natives-macos-arm64'
        } else {
            // macOS with x86_64 (Intel)
            runtimeOnly 'org.lwjgl:lwjgl:3.3.1:natives-macos'
            runtimeOnly 'org.lwjgl:lwjgl-glfw:3.3.1:natives-macos'
            runtimeOnly 'org.lwjgl:lwjgl-opengl:3.3.1:natives-macos'
        }
        // Add JVM argument specific to macOS
        applicationDefaultJvmArgs = ['-XstartOnFirstThread']
    } else if (osName.contains("win")) {
        runtimeOnly 'org.lwjgl:lwjgl:3.3.1:natives-windows'
        runtimeOnly 'org.lwjgl:lwjgl-glfw:3.3.1:natives-windows'
        runtimeOnly 'org.lwjgl:lwjgl-opengl:3.3.1:natives-windows'
    } else if (osName.contains("linux")) {
        runtimeOnly 'org.lwjgl:lwjgl:3.3.1:natives-linux'
        runtimeOnly 'org.lwjgl:lwjgl-glfw:3.3.1:natives-linux'
        runtimeOnly 'org.lwjgl:lwjgl-opengl:3.3.1:natives-linux'
    } else {
        throw new GradleException("Unsupported operating system: " + osName)
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    def osName = System.getProperty("os.name").toLowerCase()
    if (osName.contains("mac")) {
        applicationDefaultJvmArgs = ['-XstartOnFirstThread']
    }
    mainClass = 'game.App'
}
